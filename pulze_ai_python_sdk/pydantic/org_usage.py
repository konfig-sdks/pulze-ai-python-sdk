# coding: utf-8

"""
    Pulze.ai API

    At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel


class OrgUsage(BaseModel):
    # Number of tokens the response used
    completion_tokens: int = Field(alias='completion_tokens')

    # Cost (in $) of the response
    completion_tokens_cost: typing.Union[int, float] = Field(alias='completion_tokens_cost')

    # Cost (in $) saved in the completion costs comparison to the benchmark model
    completion_tokens_cost_savings: typing.Union[int, float] = Field(alias='completion_tokens_cost_savings')

    # The number of active apps this Organization has
    num_apps: int = Field(alias='num_apps')

    # The number of requests this Organization has performed in the current cycle
    num_requests: int = Field(alias='num_requests')

    # The Org's ID
    org_id: str = Field(alias='org_id')

    # Number of tokens the request used
    prompt_tokens: int = Field(alias='prompt_tokens')

    # Cost (in $) of the prompt
    prompt_tokens_cost: typing.Union[int, float] = Field(alias='prompt_tokens_cost')

    # Cost (in $) saved in the prompt costs comparison to the benchmark model
    prompt_tokens_cost_savings: typing.Union[int, float] = Field(alias='prompt_tokens_cost_savings')

    # Number of tokens of (request + response)
    total_tokens: int = Field(alias='total_tokens')

    # Cost (in $) of the (request + response)
    total_tokens_cost: typing.Union[int, float] = Field(alias='total_tokens_cost')

    # Cost (in $) saved in total, in comparison to the benchmark model
    total_tokens_cost_savings: typing.Union[int, float] = Field(alias='total_tokens_cost_savings')
    class Config:
        arbitrary_types_allowed = True
