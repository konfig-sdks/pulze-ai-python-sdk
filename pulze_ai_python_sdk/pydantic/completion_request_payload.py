# coding: utf-8

"""
    Pulze.ai API

    At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from pulze_ai_python_sdk.pydantic.role_content_chat_choice import RoleContentChatChoice
from pulze_ai_python_sdk.pydantic.tool_choice import ToolChoice
from pulze_ai_python_sdk.pydantic.tool_function import ToolFunction

class CompletionRequestPayload(BaseModel):
    # The number of responses to _generate_. Out of those, it will return the best `n`.
    best_of: typing.Optional[int] = Field(None, alias='best_of')

    # How many completions to generate for each prompt. @default 1 
    false_: typing.Optional[int] = Field(None, alias='false')

    # https://platform.openai.com/docs/api-reference/completions/create#completions/create-frequency_penalty Increase the model's likelihood to not repeat tokens/words 
    frequency_penalty: typing.Optional[typing.Union[int, float]] = Field(None, alias='frequency_penalty')

    # COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logit_bias Modify the likelihood of specified tokens appearing in the completion.  See here for a detailed explanation on how to use: https://help.openai.com/en/articles/5247780-using-logit-bias-to-define-token-probability 
    logit_bias: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='logit_bias')

    # COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logprobs Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. 
    logprobs: typing.Optional[int] = Field(None, alias='logprobs')

    # The maximum number of tokens that the response can contain.
    max_tokens: typing.Optional[int] = Field(None, alias='max_tokens')

    # The conversation sent (with or without history) (for a /chat/completions request)
    messages: typing.Optional[typing.List[RoleContentChatChoice]] = Field(None, alias='messages')

    # https://docs.pulze.ai/overview/models Specify the model you'd like Pulze to use. (optional). Can be the full model name, or a subset for multi-matching.  Defaults to our dynamic routing, i.e. best model for this request. 
    model: typing.Optional[str] = Field(None, alias='model')

    # https://platform.openai.com/docs/api-reference/completions/create#completions/create-presence_penalty Increase the model's likelihood to talk about new topics 
    presence_penalty: typing.Optional[typing.Union[int, float]] = Field(None, alias='presence_penalty')

    # The prompt text sent (for a /completions request)
    prompt: typing.Optional[typing.Union[str, typing.List[str]]] = Field(None, alias='prompt')

    # Stop responding when this sequence of characters is generated. Leave empty to allow the model to decide. 
    stop: typing.Optional[typing.Union[str, typing.List[str]]] = Field(None, alias='stop')

    # ** COMING SOON ** Specify if you want the response to be streamed or to be returned as a standard HTTP request 
    stream: typing.Optional[bool] = Field(None, alias='stream')

    # COMING SOON
    suffix: typing.Optional[str] = Field(None, alias='suffix')

    # Optionally specify the temperature for this request only. Leave empty to allow Pulze to guess it for you.
    temperature: typing.Optional[typing.Union[int, float]] = Field(None, alias='temperature')

    tool_choice: typing.Optional[typing.Union[str, ToolChoice]] = Field(None, alias='tool_choice')

    tools: typing.Optional[typing.List[ToolFunction]] = Field(None, alias='tools')

    # https://platform.openai.com/docs/api-reference/completions/create#completions/create-top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass 
    top_p: typing.Optional[typing.Union[int, float]] = Field(None, alias='top_p')
    class Config:
        arbitrary_types_allowed = True
