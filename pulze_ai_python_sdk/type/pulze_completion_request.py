# coding: utf-8

"""
    Pulze.ai API

    At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING

from pulze_ai_python_sdk.type.llm_model_policies import LLMModelPolicies
from pulze_ai_python_sdk.type.llm_model_weights import LLMModelWeights
from pulze_ai_python_sdk.type.pulze_completion_request_headers import PulzeCompletionRequestHeaders
from pulze_ai_python_sdk.type.pulze_completion_request_labels import PulzeCompletionRequestLabels
from pulze_ai_python_sdk.type.role_content_chat_choice import RoleContentChatChoice
from pulze_ai_python_sdk.type.tool_choice import ToolChoice
from pulze_ai_python_sdk.type.tool_function import ToolFunction

RequiredPulzeCompletionRequest = TypedDict("RequiredPulzeCompletionRequest", {
    })

OptionalPulzeCompletionRequest = TypedDict("OptionalPulzeCompletionRequest", {
    # The number of responses to _generate_. Out of those, it will return the best `n`.
    "best_of": int,

    # The maximum context size (tokens) for the provided model
    "context_window": int,

    # How many completions to generate for each prompt. @default 1 
    "false": int,

    # https://platform.openai.com/docs/api-reference/completions/create#completions/create-frequency_penalty Increase the model's likelihood to not repeat tokens/words 
    "frequency_penalty": typing.Union[int, float],

    "headers": PulzeCompletionRequestHeaders,

    "labels": PulzeCompletionRequestLabels,

    # COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logit_bias Modify the likelihood of specified tokens appearing in the completion.  See here for a detailed explanation on how to use: https://help.openai.com/en/articles/5247780-using-logit-bias-to-define-token-probability 
    "logit_bias": typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]],

    # COMING SOON https://platform.openai.com/docs/api-reference/completions/create#completions/create-logprobs Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. 
    "logprobs": int,

    # The maximum number of tokens that the response can contain.
    "max_tokens": int,

    # The conversation sent (with or without history) (for a /chat/completions request)
    "messages": typing.List[RoleContentChatChoice],

    # https://docs.pulze.ai/overview/models Specify the model you'd like Pulze to use. (optional). Can be the full model name, or a subset for multi-matching.  Defaults to our dynamic routing, i.e. best model for this request. 
    "model": str,

    # Settings for how this request should be processed: Anonimized, public, and more.
    "policies": LLMModelPolicies,

    # https://platform.openai.com/docs/api-reference/completions/create#completions/create-presence_penalty Increase the model's likelihood to talk about new topics 
    "presence_penalty": typing.Union[int, float],

    # The prompt text sent (for a /completions request)
    "prompt": typing.Union[str, typing.List[str]],

    # The name of the provider for the request
    "provider": str,

    # Stop responding when this sequence of characters is generated. Leave empty to allow the model to decide. 
    "stop": typing.Union[str, typing.List[str]],

    # ** COMING SOON ** Specify if you want the response to be streamed or to be returned as a standard HTTP request 
    "stream": bool,

    # COMING SOON
    "suffix": str,

    # Optionally specify the temperature for this request only. Leave empty to allow Pulze to guess it for you.
    "temperature": typing.Union[int, float],

    "tool_choice": typing.Union[str, ToolChoice],

    "tools": typing.List[ToolFunction],

    # https://platform.openai.com/docs/api-reference/completions/create#completions/create-top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass 
    "top_p": typing.Union[int, float],

    # Optionally specify specific weights for this request only. Leave empty to use the App's weights (global configuration)
    "weights": LLMModelWeights,
    }, total=False)

class PulzeCompletionRequest(RequiredPulzeCompletionRequest, OptionalPulzeCompletionRequest):
    pass
