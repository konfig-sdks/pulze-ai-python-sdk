# coding: utf-8

"""
    Pulze.ai API

    At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pulze_ai_python_sdk import schemas  # noqa: F401


class RequestNormalized(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "completion_tokens_cost_savings",
            "completion_tokens",
            "prompt_tokens_cost",
            "total_tokens_cost",
            "completion_tokens_cost",
            "model_id",
            "prompt_tokens_cost_savings",
            "prompt_tokens",
            "total_tokens_cost_savings",
            "response",
            "total_tokens",
            "model",
            "id",
            "timestamp",
        }
        
        class properties:
            completion_tokens = schemas.IntSchema
            completion_tokens_cost = schemas.NumberSchema
            completion_tokens_cost_savings = schemas.NumberSchema
            id = schemas.UUIDSchema
            model = schemas.StrSchema
            model_id = schemas.UUIDSchema
            prompt_tokens = schemas.IntSchema
            prompt_tokens_cost = schemas.NumberSchema
            prompt_tokens_cost_savings = schemas.NumberSchema
        
            @staticmethod
            def response() -> typing.Type['PulzeEngineResponse']:
                return PulzeEngineResponse
            timestamp = schemas.IntSchema
            total_tokens = schemas.IntSchema
            total_tokens_cost = schemas.NumberSchema
            total_tokens_cost_savings = schemas.NumberSchema
            app_id = schemas.UUIDSchema
            at = schemas.StrSchema
            
            
            class children(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RequestInDBBase']:
                        return RequestInDBBase
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RequestInDBBase'], typing.List['RequestInDBBase']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'children':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RequestInDBBase':
                    return super().__getitem__(i)
            costs_incurred = schemas.BoolSchema
            created = schemas.DateTimeSchema
            feedback = schemas.StrSchema
            good_answer = schemas.BoolSchema
            latency = schemas.NumberSchema
            namespace = schemas.StrSchema
            owner = schemas.StrSchema
        
            @staticmethod
            def parent() -> typing.Type['RequestInDBBase']:
                return RequestInDBBase
            parent_id = schemas.UUIDSchema
        
            @staticmethod
            def payload() -> typing.Type['PulzeCompletionRequest']:
                return PulzeCompletionRequest
            
            
            class privacy_level(
                schemas.EnumBase,
                schemas.IntSchema
            ):
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
            prompt = schemas.StrSchema
            provider = schemas.StrSchema
            
            
            class request_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COMPLETIONS(cls):
                    return cls("completions")
                
                @schemas.classproperty
                def CHAT_COMPLETIONS(cls):
                    return cls("chat_completions")
            response_text = schemas.StrSchema
            status_code = schemas.IntSchema
            __annotations__ = {
                "completion_tokens": completion_tokens,
                "completion_tokens_cost": completion_tokens_cost,
                "completion_tokens_cost_savings": completion_tokens_cost_savings,
                "id": id,
                "model": model,
                "model_id": model_id,
                "prompt_tokens": prompt_tokens,
                "prompt_tokens_cost": prompt_tokens_cost,
                "prompt_tokens_cost_savings": prompt_tokens_cost_savings,
                "response": response,
                "timestamp": timestamp,
                "total_tokens": total_tokens,
                "total_tokens_cost": total_tokens_cost,
                "total_tokens_cost_savings": total_tokens_cost_savings,
                "app_id": app_id,
                "at": at,
                "children": children,
                "costs_incurred": costs_incurred,
                "created": created,
                "feedback": feedback,
                "good_answer": good_answer,
                "latency": latency,
                "namespace": namespace,
                "owner": owner,
                "parent": parent,
                "parent_id": parent_id,
                "payload": payload,
                "privacy_level": privacy_level,
                "prompt": prompt,
                "provider": provider,
                "request_type": request_type,
                "response_text": response_text,
                "status_code": status_code,
            }
    
    completion_tokens_cost_savings: MetaOapg.properties.completion_tokens_cost_savings
    completion_tokens: MetaOapg.properties.completion_tokens
    prompt_tokens_cost: MetaOapg.properties.prompt_tokens_cost
    total_tokens_cost: MetaOapg.properties.total_tokens_cost
    completion_tokens_cost: MetaOapg.properties.completion_tokens_cost
    model_id: MetaOapg.properties.model_id
    prompt_tokens_cost_savings: MetaOapg.properties.prompt_tokens_cost_savings
    prompt_tokens: MetaOapg.properties.prompt_tokens
    total_tokens_cost_savings: MetaOapg.properties.total_tokens_cost_savings
    response: 'PulzeEngineResponse'
    total_tokens: MetaOapg.properties.total_tokens
    model: MetaOapg.properties.model
    id: MetaOapg.properties.id
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completion_tokens"]) -> MetaOapg.properties.completion_tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completion_tokens_cost"]) -> MetaOapg.properties.completion_tokens_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completion_tokens_cost_savings"]) -> MetaOapg.properties.completion_tokens_cost_savings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt_tokens"]) -> MetaOapg.properties.prompt_tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt_tokens_cost"]) -> MetaOapg.properties.prompt_tokens_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt_tokens_cost_savings"]) -> MetaOapg.properties.prompt_tokens_cost_savings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response"]) -> 'PulzeEngineResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_tokens"]) -> MetaOapg.properties.total_tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_tokens_cost"]) -> MetaOapg.properties.total_tokens_cost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_tokens_cost_savings"]) -> MetaOapg.properties.total_tokens_cost_savings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["children"]) -> MetaOapg.properties.children: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costs_incurred"]) -> MetaOapg.properties.costs_incurred: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedback"]) -> MetaOapg.properties.feedback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["good_answer"]) -> MetaOapg.properties.good_answer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latency"]) -> MetaOapg.properties.latency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> 'RequestInDBBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_id"]) -> MetaOapg.properties.parent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payload"]) -> 'PulzeCompletionRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy_level"]) -> MetaOapg.properties.privacy_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_type"]) -> MetaOapg.properties.request_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response_text"]) -> MetaOapg.properties.response_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_code"]) -> MetaOapg.properties.status_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["completion_tokens", "completion_tokens_cost", "completion_tokens_cost_savings", "id", "model", "model_id", "prompt_tokens", "prompt_tokens_cost", "prompt_tokens_cost_savings", "response", "timestamp", "total_tokens", "total_tokens_cost", "total_tokens_cost_savings", "app_id", "at", "children", "costs_incurred", "created", "feedback", "good_answer", "latency", "namespace", "owner", "parent", "parent_id", "payload", "privacy_level", "prompt", "provider", "request_type", "response_text", "status_code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completion_tokens"]) -> MetaOapg.properties.completion_tokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completion_tokens_cost"]) -> MetaOapg.properties.completion_tokens_cost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completion_tokens_cost_savings"]) -> MetaOapg.properties.completion_tokens_cost_savings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt_tokens"]) -> MetaOapg.properties.prompt_tokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt_tokens_cost"]) -> MetaOapg.properties.prompt_tokens_cost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt_tokens_cost_savings"]) -> MetaOapg.properties.prompt_tokens_cost_savings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response"]) -> 'PulzeEngineResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_tokens"]) -> MetaOapg.properties.total_tokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_tokens_cost"]) -> MetaOapg.properties.total_tokens_cost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_tokens_cost_savings"]) -> MetaOapg.properties.total_tokens_cost_savings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> typing.Union[MetaOapg.properties.app_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> typing.Union[MetaOapg.properties.at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["children"]) -> typing.Union[MetaOapg.properties.children, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costs_incurred"]) -> typing.Union[MetaOapg.properties.costs_incurred, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedback"]) -> typing.Union[MetaOapg.properties.feedback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["good_answer"]) -> typing.Union[MetaOapg.properties.good_answer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latency"]) -> typing.Union[MetaOapg.properties.latency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> typing.Union[MetaOapg.properties.namespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union['RequestInDBBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_id"]) -> typing.Union[MetaOapg.properties.parent_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payload"]) -> typing.Union['PulzeCompletionRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy_level"]) -> typing.Union[MetaOapg.properties.privacy_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt"]) -> typing.Union[MetaOapg.properties.prompt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union[MetaOapg.properties.provider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_type"]) -> typing.Union[MetaOapg.properties.request_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response_text"]) -> typing.Union[MetaOapg.properties.response_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_code"]) -> typing.Union[MetaOapg.properties.status_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["completion_tokens", "completion_tokens_cost", "completion_tokens_cost_savings", "id", "model", "model_id", "prompt_tokens", "prompt_tokens_cost", "prompt_tokens_cost_savings", "response", "timestamp", "total_tokens", "total_tokens_cost", "total_tokens_cost_savings", "app_id", "at", "children", "costs_incurred", "created", "feedback", "good_answer", "latency", "namespace", "owner", "parent", "parent_id", "payload", "privacy_level", "prompt", "provider", "request_type", "response_text", "status_code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        completion_tokens_cost_savings: typing.Union[MetaOapg.properties.completion_tokens_cost_savings, decimal.Decimal, int, float, ],
        completion_tokens: typing.Union[MetaOapg.properties.completion_tokens, decimal.Decimal, int, ],
        prompt_tokens_cost: typing.Union[MetaOapg.properties.prompt_tokens_cost, decimal.Decimal, int, float, ],
        total_tokens_cost: typing.Union[MetaOapg.properties.total_tokens_cost, decimal.Decimal, int, float, ],
        completion_tokens_cost: typing.Union[MetaOapg.properties.completion_tokens_cost, decimal.Decimal, int, float, ],
        model_id: typing.Union[MetaOapg.properties.model_id, str, uuid.UUID, ],
        prompt_tokens_cost_savings: typing.Union[MetaOapg.properties.prompt_tokens_cost_savings, decimal.Decimal, int, float, ],
        prompt_tokens: typing.Union[MetaOapg.properties.prompt_tokens, decimal.Decimal, int, ],
        total_tokens_cost_savings: typing.Union[MetaOapg.properties.total_tokens_cost_savings, decimal.Decimal, int, float, ],
        response: 'PulzeEngineResponse',
        total_tokens: typing.Union[MetaOapg.properties.total_tokens, decimal.Decimal, int, ],
        model: typing.Union[MetaOapg.properties.model, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
        app_id: typing.Union[MetaOapg.properties.app_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        at: typing.Union[MetaOapg.properties.at, str, schemas.Unset] = schemas.unset,
        children: typing.Union[MetaOapg.properties.children, list, tuple, schemas.Unset] = schemas.unset,
        costs_incurred: typing.Union[MetaOapg.properties.costs_incurred, bool, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        feedback: typing.Union[MetaOapg.properties.feedback, str, schemas.Unset] = schemas.unset,
        good_answer: typing.Union[MetaOapg.properties.good_answer, bool, schemas.Unset] = schemas.unset,
        latency: typing.Union[MetaOapg.properties.latency, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        namespace: typing.Union[MetaOapg.properties.namespace, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        parent: typing.Union['RequestInDBBase', schemas.Unset] = schemas.unset,
        parent_id: typing.Union[MetaOapg.properties.parent_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        payload: typing.Union['PulzeCompletionRequest', schemas.Unset] = schemas.unset,
        privacy_level: typing.Union[MetaOapg.properties.privacy_level, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        prompt: typing.Union[MetaOapg.properties.prompt, str, schemas.Unset] = schemas.unset,
        provider: typing.Union[MetaOapg.properties.provider, str, schemas.Unset] = schemas.unset,
        request_type: typing.Union[MetaOapg.properties.request_type, str, schemas.Unset] = schemas.unset,
        response_text: typing.Union[MetaOapg.properties.response_text, str, schemas.Unset] = schemas.unset,
        status_code: typing.Union[MetaOapg.properties.status_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RequestNormalized':
        return super().__new__(
            cls,
            *args,
            completion_tokens_cost_savings=completion_tokens_cost_savings,
            completion_tokens=completion_tokens,
            prompt_tokens_cost=prompt_tokens_cost,
            total_tokens_cost=total_tokens_cost,
            completion_tokens_cost=completion_tokens_cost,
            model_id=model_id,
            prompt_tokens_cost_savings=prompt_tokens_cost_savings,
            prompt_tokens=prompt_tokens,
            total_tokens_cost_savings=total_tokens_cost_savings,
            response=response,
            total_tokens=total_tokens,
            model=model,
            id=id,
            timestamp=timestamp,
            app_id=app_id,
            at=at,
            children=children,
            costs_incurred=costs_incurred,
            created=created,
            feedback=feedback,
            good_answer=good_answer,
            latency=latency,
            namespace=namespace,
            owner=owner,
            parent=parent,
            parent_id=parent_id,
            payload=payload,
            privacy_level=privacy_level,
            prompt=prompt,
            provider=provider,
            request_type=request_type,
            response_text=response_text,
            status_code=status_code,
            _configuration=_configuration,
            **kwargs,
        )

from pulze_ai_python_sdk.model.pulze_completion_request import PulzeCompletionRequest
from pulze_ai_python_sdk.model.pulze_engine_response import PulzeEngineResponse
from pulze_ai_python_sdk.model.request_in_db_base import RequestInDBBase
