# coding: utf-8

"""
    Pulze.ai API

    At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pulze_ai_python_sdk import schemas  # noqa: F401


class SubscriptionSettings(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    For any given subscription, this represents the set of available features
    """


    class MetaOapg:
        required = {
            "personalized_llm_routing",
            "prompt_models",
            "max_tokens",
            "support_level_readable",
            "max_tokens_readable",
            "max_apps",
            "name",
            "fine_tuning",
            "support_level",
            "customer_success",
            "max_apps_readable",
            "prompts",
        }
        
        class properties:
            customer_success = schemas.BoolSchema
            fine_tuning = schemas.BoolSchema
            max_apps = schemas.IntSchema
            max_apps_readable = schemas.StrSchema
            max_tokens = schemas.IntSchema
            max_tokens_readable = schemas.StrSchema
            name = schemas.StrSchema
            personalized_llm_routing = schemas.BoolSchema
            prompt_models = schemas.BoolSchema
            prompts = schemas.BoolSchema
            
            
            class support_level(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "community": "COMMUNITY",
                        "all": "ALL",
                    }
                
                @schemas.classproperty
                def COMMUNITY(cls):
                    return cls("community")
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("all")
            support_level_readable = schemas.StrSchema
            flowz = schemas.BoolSchema
            llm_routing = schemas.BoolSchema
            monthly_price_id = schemas.StrSchema
            monthly_price_usd = schemas.NumberSchema
            yearly_price_id = schemas.StrSchema
            yearly_price_usd = schemas.NumberSchema
            __annotations__ = {
                "customer_success": customer_success,
                "fine_tuning": fine_tuning,
                "max_apps": max_apps,
                "max_apps_readable": max_apps_readable,
                "max_tokens": max_tokens,
                "max_tokens_readable": max_tokens_readable,
                "name": name,
                "personalized_llm_routing": personalized_llm_routing,
                "prompt_models": prompt_models,
                "prompts": prompts,
                "support_level": support_level,
                "support_level_readable": support_level_readable,
                "flowz": flowz,
                "llm_routing": llm_routing,
                "monthly_price_id": monthly_price_id,
                "monthly_price_usd": monthly_price_usd,
                "yearly_price_id": yearly_price_id,
                "yearly_price_usd": yearly_price_usd,
            }
    
    personalized_llm_routing: MetaOapg.properties.personalized_llm_routing
    prompt_models: MetaOapg.properties.prompt_models
    max_tokens: MetaOapg.properties.max_tokens
    support_level_readable: MetaOapg.properties.support_level_readable
    max_tokens_readable: MetaOapg.properties.max_tokens_readable
    max_apps: MetaOapg.properties.max_apps
    name: MetaOapg.properties.name
    fine_tuning: MetaOapg.properties.fine_tuning
    support_level: MetaOapg.properties.support_level
    customer_success: MetaOapg.properties.customer_success
    max_apps_readable: MetaOapg.properties.max_apps_readable
    prompts: MetaOapg.properties.prompts
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_success"]) -> MetaOapg.properties.customer_success: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fine_tuning"]) -> MetaOapg.properties.fine_tuning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_apps"]) -> MetaOapg.properties.max_apps: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_apps_readable"]) -> MetaOapg.properties.max_apps_readable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_tokens"]) -> MetaOapg.properties.max_tokens: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_tokens_readable"]) -> MetaOapg.properties.max_tokens_readable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalized_llm_routing"]) -> MetaOapg.properties.personalized_llm_routing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt_models"]) -> MetaOapg.properties.prompt_models: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompts"]) -> MetaOapg.properties.prompts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["support_level"]) -> MetaOapg.properties.support_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["support_level_readable"]) -> MetaOapg.properties.support_level_readable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowz"]) -> MetaOapg.properties.flowz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["llm_routing"]) -> MetaOapg.properties.llm_routing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_price_id"]) -> MetaOapg.properties.monthly_price_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_price_usd"]) -> MetaOapg.properties.monthly_price_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearly_price_id"]) -> MetaOapg.properties.yearly_price_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearly_price_usd"]) -> MetaOapg.properties.yearly_price_usd: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customer_success", "fine_tuning", "max_apps", "max_apps_readable", "max_tokens", "max_tokens_readable", "name", "personalized_llm_routing", "prompt_models", "prompts", "support_level", "support_level_readable", "flowz", "llm_routing", "monthly_price_id", "monthly_price_usd", "yearly_price_id", "yearly_price_usd", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_success"]) -> MetaOapg.properties.customer_success: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fine_tuning"]) -> MetaOapg.properties.fine_tuning: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_apps"]) -> MetaOapg.properties.max_apps: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_apps_readable"]) -> MetaOapg.properties.max_apps_readable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_tokens"]) -> MetaOapg.properties.max_tokens: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_tokens_readable"]) -> MetaOapg.properties.max_tokens_readable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalized_llm_routing"]) -> MetaOapg.properties.personalized_llm_routing: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt_models"]) -> MetaOapg.properties.prompt_models: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompts"]) -> MetaOapg.properties.prompts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["support_level"]) -> MetaOapg.properties.support_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["support_level_readable"]) -> MetaOapg.properties.support_level_readable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowz"]) -> typing.Union[MetaOapg.properties.flowz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["llm_routing"]) -> typing.Union[MetaOapg.properties.llm_routing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_price_id"]) -> typing.Union[MetaOapg.properties.monthly_price_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_price_usd"]) -> typing.Union[MetaOapg.properties.monthly_price_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearly_price_id"]) -> typing.Union[MetaOapg.properties.yearly_price_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearly_price_usd"]) -> typing.Union[MetaOapg.properties.yearly_price_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customer_success", "fine_tuning", "max_apps", "max_apps_readable", "max_tokens", "max_tokens_readable", "name", "personalized_llm_routing", "prompt_models", "prompts", "support_level", "support_level_readable", "flowz", "llm_routing", "monthly_price_id", "monthly_price_usd", "yearly_price_id", "yearly_price_usd", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        personalized_llm_routing: typing.Union[MetaOapg.properties.personalized_llm_routing, bool, ],
        prompt_models: typing.Union[MetaOapg.properties.prompt_models, bool, ],
        max_tokens: typing.Union[MetaOapg.properties.max_tokens, decimal.Decimal, int, ],
        support_level_readable: typing.Union[MetaOapg.properties.support_level_readable, str, ],
        max_tokens_readable: typing.Union[MetaOapg.properties.max_tokens_readable, str, ],
        max_apps: typing.Union[MetaOapg.properties.max_apps, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        fine_tuning: typing.Union[MetaOapg.properties.fine_tuning, bool, ],
        support_level: typing.Union[MetaOapg.properties.support_level, str, ],
        customer_success: typing.Union[MetaOapg.properties.customer_success, bool, ],
        max_apps_readable: typing.Union[MetaOapg.properties.max_apps_readable, str, ],
        prompts: typing.Union[MetaOapg.properties.prompts, bool, ],
        flowz: typing.Union[MetaOapg.properties.flowz, bool, schemas.Unset] = schemas.unset,
        llm_routing: typing.Union[MetaOapg.properties.llm_routing, bool, schemas.Unset] = schemas.unset,
        monthly_price_id: typing.Union[MetaOapg.properties.monthly_price_id, str, schemas.Unset] = schemas.unset,
        monthly_price_usd: typing.Union[MetaOapg.properties.monthly_price_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yearly_price_id: typing.Union[MetaOapg.properties.yearly_price_id, str, schemas.Unset] = schemas.unset,
        yearly_price_usd: typing.Union[MetaOapg.properties.yearly_price_usd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubscriptionSettings':
        return super().__new__(
            cls,
            *args,
            personalized_llm_routing=personalized_llm_routing,
            prompt_models=prompt_models,
            max_tokens=max_tokens,
            support_level_readable=support_level_readable,
            max_tokens_readable=max_tokens_readable,
            max_apps=max_apps,
            name=name,
            fine_tuning=fine_tuning,
            support_level=support_level,
            customer_success=customer_success,
            max_apps_readable=max_apps_readable,
            prompts=prompts,
            flowz=flowz,
            llm_routing=llm_routing,
            monthly_price_id=monthly_price_id,
            monthly_price_usd=monthly_price_usd,
            yearly_price_id=yearly_price_id,
            yearly_price_usd=yearly_price_usd,
            _configuration=_configuration,
            **kwargs,
        )
