# coding: utf-8

"""
    Pulze.ai API

    At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pulze_ai_python_sdk import schemas  # noqa: F401


class OrgUpdate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "address_1",
            "address_country",
            "address_2",
            "billing_email",
            "org_display_name",
            "address_state",
            "address_zip",
            "id",
            "org_name",
            "address_city",
            "org_logo",
        }
        
        class properties:
            address_1 = schemas.StrSchema
            address_2 = schemas.StrSchema
            address_city = schemas.StrSchema
            address_country = schemas.StrSchema
            address_state = schemas.StrSchema
            address_zip = schemas.StrSchema
            billing_email = schemas.StrSchema
            id = schemas.UUIDSchema
            
            
            class org_display_name(
                schemas.StrSchema
            ):
                pass
            org_logo = schemas.StrSchema
            
            
            class org_name(
                schemas.StrSchema
            ):
                pass
            added_on = schemas.DateTimeSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
            last_invoice_date = schemas.DateTimeSchema
            pending_expense = schemas.NumberSchema
            __annotations__ = {
                "address_1": address_1,
                "address_2": address_2,
                "address_city": address_city,
                "address_country": address_country,
                "address_state": address_state,
                "address_zip": address_zip,
                "billing_email": billing_email,
                "id": id,
                "org_display_name": org_display_name,
                "org_logo": org_logo,
                "org_name": org_name,
                "added_on": added_on,
                "currency": currency,
                "last_invoice_date": last_invoice_date,
                "pending_expense": pending_expense,
            }
    
    address_1: MetaOapg.properties.address_1
    address_country: MetaOapg.properties.address_country
    address_2: MetaOapg.properties.address_2
    billing_email: MetaOapg.properties.billing_email
    org_display_name: MetaOapg.properties.org_display_name
    address_state: MetaOapg.properties.address_state
    address_zip: MetaOapg.properties.address_zip
    id: MetaOapg.properties.id
    org_name: MetaOapg.properties.org_name
    address_city: MetaOapg.properties.address_city
    org_logo: MetaOapg.properties.org_logo
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_1"]) -> MetaOapg.properties.address_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_2"]) -> MetaOapg.properties.address_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_city"]) -> MetaOapg.properties.address_city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_country"]) -> MetaOapg.properties.address_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_state"]) -> MetaOapg.properties.address_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_zip"]) -> MetaOapg.properties.address_zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_email"]) -> MetaOapg.properties.billing_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_display_name"]) -> MetaOapg.properties.org_display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_logo"]) -> MetaOapg.properties.org_logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_name"]) -> MetaOapg.properties.org_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_on"]) -> MetaOapg.properties.added_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_invoice_date"]) -> MetaOapg.properties.last_invoice_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending_expense"]) -> MetaOapg.properties.pending_expense: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address_1", "address_2", "address_city", "address_country", "address_state", "address_zip", "billing_email", "id", "org_display_name", "org_logo", "org_name", "added_on", "currency", "last_invoice_date", "pending_expense", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_1"]) -> MetaOapg.properties.address_1: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_2"]) -> MetaOapg.properties.address_2: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_city"]) -> MetaOapg.properties.address_city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_country"]) -> MetaOapg.properties.address_country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_state"]) -> MetaOapg.properties.address_state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_zip"]) -> MetaOapg.properties.address_zip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_email"]) -> MetaOapg.properties.billing_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_display_name"]) -> MetaOapg.properties.org_display_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_logo"]) -> MetaOapg.properties.org_logo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_name"]) -> MetaOapg.properties.org_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_on"]) -> typing.Union[MetaOapg.properties.added_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_invoice_date"]) -> typing.Union[MetaOapg.properties.last_invoice_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending_expense"]) -> typing.Union[MetaOapg.properties.pending_expense, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address_1", "address_2", "address_city", "address_country", "address_state", "address_zip", "billing_email", "id", "org_display_name", "org_logo", "org_name", "added_on", "currency", "last_invoice_date", "pending_expense", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address_1: typing.Union[MetaOapg.properties.address_1, str, ],
        address_country: typing.Union[MetaOapg.properties.address_country, str, ],
        address_2: typing.Union[MetaOapg.properties.address_2, str, ],
        billing_email: typing.Union[MetaOapg.properties.billing_email, str, ],
        org_display_name: typing.Union[MetaOapg.properties.org_display_name, str, ],
        address_state: typing.Union[MetaOapg.properties.address_state, str, ],
        address_zip: typing.Union[MetaOapg.properties.address_zip, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        org_name: typing.Union[MetaOapg.properties.org_name, str, ],
        address_city: typing.Union[MetaOapg.properties.address_city, str, ],
        org_logo: typing.Union[MetaOapg.properties.org_logo, str, ],
        added_on: typing.Union[MetaOapg.properties.added_on, str, datetime, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        last_invoice_date: typing.Union[MetaOapg.properties.last_invoice_date, str, datetime, schemas.Unset] = schemas.unset,
        pending_expense: typing.Union[MetaOapg.properties.pending_expense, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrgUpdate':
        return super().__new__(
            cls,
            *args,
            address_1=address_1,
            address_country=address_country,
            address_2=address_2,
            billing_email=billing_email,
            org_display_name=org_display_name,
            address_state=address_state,
            address_zip=address_zip,
            id=id,
            org_name=org_name,
            address_city=address_city,
            org_logo=org_logo,
            added_on=added_on,
            currency=currency,
            last_invoice_date=last_invoice_date,
            pending_expense=pending_expense,
            _configuration=_configuration,
            **kwargs,
        )
