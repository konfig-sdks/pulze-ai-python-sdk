# coding: utf-8

"""
    Pulze.ai API

    At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pulze_ai_python_sdk import schemas  # noqa: F401


class OrgMemberInvite(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "permissions",
            "name",
            "invite_status",
            "is_current_user",
            "added_on",
            "email",
        }
        
        class properties:
            added_on = schemas.DateTimeSchema
            email = schemas.StrSchema
            
            
            class invite_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "accepted": "ACCEPTED",
                        "declined": "DECLINED",
                        "pending": "PENDING",
                    }
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("accepted")
                
                @schemas.classproperty
                def DECLINED(cls):
                    return cls("declined")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
            is_current_user = schemas.BoolSchema
            name = schemas.StrSchema
            permissions = schemas.StrSchema
            auth0_id = schemas.StrSchema
            last_login = schemas.DateTimeSchema
            picture = schemas.StrSchema
            token = schemas.StrSchema
            __annotations__ = {
                "added_on": added_on,
                "email": email,
                "invite_status": invite_status,
                "is_current_user": is_current_user,
                "name": name,
                "permissions": permissions,
                "auth0_id": auth0_id,
                "last_login": last_login,
                "picture": picture,
                "token": token,
            }
    
    permissions: MetaOapg.properties.permissions
    name: MetaOapg.properties.name
    invite_status: MetaOapg.properties.invite_status
    is_current_user: MetaOapg.properties.is_current_user
    added_on: MetaOapg.properties.added_on
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_on"]) -> MetaOapg.properties.added_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invite_status"]) -> MetaOapg.properties.invite_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_current_user"]) -> MetaOapg.properties.is_current_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth0_id"]) -> MetaOapg.properties.auth0_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_login"]) -> MetaOapg.properties.last_login: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["picture"]) -> MetaOapg.properties.picture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["added_on", "email", "invite_status", "is_current_user", "name", "permissions", "auth0_id", "last_login", "picture", "token", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_on"]) -> MetaOapg.properties.added_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invite_status"]) -> MetaOapg.properties.invite_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_current_user"]) -> MetaOapg.properties.is_current_user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth0_id"]) -> typing.Union[MetaOapg.properties.auth0_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_login"]) -> typing.Union[MetaOapg.properties.last_login, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["picture"]) -> typing.Union[MetaOapg.properties.picture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["added_on", "email", "invite_status", "is_current_user", "name", "permissions", "auth0_id", "last_login", "picture", "token", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        permissions: typing.Union[MetaOapg.properties.permissions, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        invite_status: typing.Union[MetaOapg.properties.invite_status, str, ],
        is_current_user: typing.Union[MetaOapg.properties.is_current_user, bool, ],
        added_on: typing.Union[MetaOapg.properties.added_on, str, datetime, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        auth0_id: typing.Union[MetaOapg.properties.auth0_id, str, schemas.Unset] = schemas.unset,
        last_login: typing.Union[MetaOapg.properties.last_login, str, datetime, schemas.Unset] = schemas.unset,
        picture: typing.Union[MetaOapg.properties.picture, str, schemas.Unset] = schemas.unset,
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrgMemberInvite':
        return super().__new__(
            cls,
            *args,
            permissions=permissions,
            name=name,
            invite_status=invite_status,
            is_current_user=is_current_user,
            added_on=added_on,
            email=email,
            auth0_id=auth0_id,
            last_login=last_login,
            picture=picture,
            token=token,
            _configuration=_configuration,
            **kwargs,
        )
