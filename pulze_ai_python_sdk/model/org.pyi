# coding: utf-8

"""
    Pulze.ai API

    At Pulze it's our mission to supercharge today's workforce with AI to maximize the world's prosperity. We are doing so by enabling companies of any size to securely leverage Large Language Models (LLM) and easily build AI features into their apps. Our enterprise platform has access to all best in class LLMs and can route user requests to the most relevant model to get the highest quality response at the best price thanks to our smart meta model. End users can leverage pre-built applications, such as our Marketing AI product, or build custom apps on top of the Pulze Platform.  We are a VC Funded, early stage startup based in San Francisco.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pulze_ai_python_sdk import schemas  # noqa: F401


class Org(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "org_stripe_id",
            "last_invoice_date",
            "org_creator",
            "id",
            "org_name",
        }
        
        class properties:
            id = schemas.UUIDSchema
            last_invoice_date = schemas.DateTimeSchema
            org_creator = schemas.StrSchema
            org_name = schemas.StrSchema
            org_stripe_id = schemas.StrSchema
            added_on = schemas.DateTimeSchema
            address_1 = schemas.StrSchema
            address_2 = schemas.StrSchema
            address_city = schemas.StrSchema
            address_country = schemas.StrSchema
            address_state = schemas.StrSchema
            address_zip = schemas.StrSchema
            billing_email = schemas.StrSchema
            credit_balance = schemas.NumberSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
            free_balance = schemas.NumberSchema
            hubspot_id = schemas.StrSchema
            is_active = schemas.BoolSchema
            is_personal = schemas.BoolSchema
            loki_endpoint = schemas.StrSchema
            loki_id = schemas.StrSchema
            loki_token = schemas.StrSchema
            modified_on = schemas.DateTimeSchema
            org_display_name = schemas.StrSchema
            org_logo = schemas.StrSchema
            pending_expense = schemas.NumberSchema
            period_end = schemas.IntSchema
            period_start = schemas.IntSchema
            prom_endpoint = schemas.StrSchema
            prom_id = schemas.StrSchema
            prom_token = schemas.StrSchema
            rate_limit = schemas.IntSchema
            spending_limit_hard = schemas.NumberSchema
            spending_limit_soft = schemas.NumberSchema
            
            
            class subscription_cycle(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("monthly")
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("yearly")
        
            @staticmethod
            def subscription_pause_reason() -> typing.Type['SubscriptionPaused']:
                return SubscriptionPaused
            subscription_price_id = schemas.StrSchema
            
            
            class subscription_tier(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE_(cls):
                    return cls("_NONE_")
                
                @schemas.classproperty
                def STARTUP(cls):
                    return cls("STARTUP")
                
                @schemas.classproperty
                def GROWTH(cls):
                    return cls("GROWTH")
                
                @schemas.classproperty
                def SCALE(cls):
                    return cls("SCALE")
                
                @schemas.classproperty
                def ENTERPRISE(cls):
                    return cls("ENTERPRISE")
            trial_end = schemas.IntSchema
        
            @staticmethod
            def usage() -> typing.Type['OrgUsage']:
                return OrgUsage
            __annotations__ = {
                "id": id,
                "last_invoice_date": last_invoice_date,
                "org_creator": org_creator,
                "org_name": org_name,
                "org_stripe_id": org_stripe_id,
                "added_on": added_on,
                "address_1": address_1,
                "address_2": address_2,
                "address_city": address_city,
                "address_country": address_country,
                "address_state": address_state,
                "address_zip": address_zip,
                "billing_email": billing_email,
                "credit_balance": credit_balance,
                "currency": currency,
                "free_balance": free_balance,
                "hubspot_id": hubspot_id,
                "is_active": is_active,
                "is_personal": is_personal,
                "loki_endpoint": loki_endpoint,
                "loki_id": loki_id,
                "loki_token": loki_token,
                "modified_on": modified_on,
                "org_display_name": org_display_name,
                "org_logo": org_logo,
                "pending_expense": pending_expense,
                "period_end": period_end,
                "period_start": period_start,
                "prom_endpoint": prom_endpoint,
                "prom_id": prom_id,
                "prom_token": prom_token,
                "rate_limit": rate_limit,
                "spending_limit_hard": spending_limit_hard,
                "spending_limit_soft": spending_limit_soft,
                "subscription_cycle": subscription_cycle,
                "subscription_pause_reason": subscription_pause_reason,
                "subscription_price_id": subscription_price_id,
                "subscription_tier": subscription_tier,
                "trial_end": trial_end,
                "usage": usage,
            }
    
    org_stripe_id: MetaOapg.properties.org_stripe_id
    last_invoice_date: MetaOapg.properties.last_invoice_date
    org_creator: MetaOapg.properties.org_creator
    id: MetaOapg.properties.id
    org_name: MetaOapg.properties.org_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_invoice_date"]) -> MetaOapg.properties.last_invoice_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_creator"]) -> MetaOapg.properties.org_creator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_name"]) -> MetaOapg.properties.org_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_stripe_id"]) -> MetaOapg.properties.org_stripe_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_on"]) -> MetaOapg.properties.added_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_1"]) -> MetaOapg.properties.address_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_2"]) -> MetaOapg.properties.address_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_city"]) -> MetaOapg.properties.address_city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_country"]) -> MetaOapg.properties.address_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_state"]) -> MetaOapg.properties.address_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_zip"]) -> MetaOapg.properties.address_zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_email"]) -> MetaOapg.properties.billing_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit_balance"]) -> MetaOapg.properties.credit_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["free_balance"]) -> MetaOapg.properties.free_balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hubspot_id"]) -> MetaOapg.properties.hubspot_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_personal"]) -> MetaOapg.properties.is_personal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loki_endpoint"]) -> MetaOapg.properties.loki_endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loki_id"]) -> MetaOapg.properties.loki_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loki_token"]) -> MetaOapg.properties.loki_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_display_name"]) -> MetaOapg.properties.org_display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_logo"]) -> MetaOapg.properties.org_logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending_expense"]) -> MetaOapg.properties.pending_expense: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period_end"]) -> MetaOapg.properties.period_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period_start"]) -> MetaOapg.properties.period_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prom_endpoint"]) -> MetaOapg.properties.prom_endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prom_id"]) -> MetaOapg.properties.prom_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prom_token"]) -> MetaOapg.properties.prom_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate_limit"]) -> MetaOapg.properties.rate_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spending_limit_hard"]) -> MetaOapg.properties.spending_limit_hard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spending_limit_soft"]) -> MetaOapg.properties.spending_limit_soft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription_cycle"]) -> MetaOapg.properties.subscription_cycle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription_pause_reason"]) -> 'SubscriptionPaused': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription_price_id"]) -> MetaOapg.properties.subscription_price_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription_tier"]) -> MetaOapg.properties.subscription_tier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trial_end"]) -> MetaOapg.properties.trial_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'OrgUsage': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "last_invoice_date", "org_creator", "org_name", "org_stripe_id", "added_on", "address_1", "address_2", "address_city", "address_country", "address_state", "address_zip", "billing_email", "credit_balance", "currency", "free_balance", "hubspot_id", "is_active", "is_personal", "loki_endpoint", "loki_id", "loki_token", "modified_on", "org_display_name", "org_logo", "pending_expense", "period_end", "period_start", "prom_endpoint", "prom_id", "prom_token", "rate_limit", "spending_limit_hard", "spending_limit_soft", "subscription_cycle", "subscription_pause_reason", "subscription_price_id", "subscription_tier", "trial_end", "usage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_invoice_date"]) -> MetaOapg.properties.last_invoice_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_creator"]) -> MetaOapg.properties.org_creator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_name"]) -> MetaOapg.properties.org_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_stripe_id"]) -> MetaOapg.properties.org_stripe_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_on"]) -> typing.Union[MetaOapg.properties.added_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_1"]) -> typing.Union[MetaOapg.properties.address_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_2"]) -> typing.Union[MetaOapg.properties.address_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_city"]) -> typing.Union[MetaOapg.properties.address_city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_country"]) -> typing.Union[MetaOapg.properties.address_country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_state"]) -> typing.Union[MetaOapg.properties.address_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_zip"]) -> typing.Union[MetaOapg.properties.address_zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_email"]) -> typing.Union[MetaOapg.properties.billing_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit_balance"]) -> typing.Union[MetaOapg.properties.credit_balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["free_balance"]) -> typing.Union[MetaOapg.properties.free_balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hubspot_id"]) -> typing.Union[MetaOapg.properties.hubspot_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_personal"]) -> typing.Union[MetaOapg.properties.is_personal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loki_endpoint"]) -> typing.Union[MetaOapg.properties.loki_endpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loki_id"]) -> typing.Union[MetaOapg.properties.loki_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loki_token"]) -> typing.Union[MetaOapg.properties.loki_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_on"]) -> typing.Union[MetaOapg.properties.modified_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_display_name"]) -> typing.Union[MetaOapg.properties.org_display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_logo"]) -> typing.Union[MetaOapg.properties.org_logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending_expense"]) -> typing.Union[MetaOapg.properties.pending_expense, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period_end"]) -> typing.Union[MetaOapg.properties.period_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period_start"]) -> typing.Union[MetaOapg.properties.period_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prom_endpoint"]) -> typing.Union[MetaOapg.properties.prom_endpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prom_id"]) -> typing.Union[MetaOapg.properties.prom_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prom_token"]) -> typing.Union[MetaOapg.properties.prom_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate_limit"]) -> typing.Union[MetaOapg.properties.rate_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spending_limit_hard"]) -> typing.Union[MetaOapg.properties.spending_limit_hard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spending_limit_soft"]) -> typing.Union[MetaOapg.properties.spending_limit_soft, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription_cycle"]) -> typing.Union[MetaOapg.properties.subscription_cycle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription_pause_reason"]) -> typing.Union['SubscriptionPaused', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription_price_id"]) -> typing.Union[MetaOapg.properties.subscription_price_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription_tier"]) -> typing.Union[MetaOapg.properties.subscription_tier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trial_end"]) -> typing.Union[MetaOapg.properties.trial_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union['OrgUsage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "last_invoice_date", "org_creator", "org_name", "org_stripe_id", "added_on", "address_1", "address_2", "address_city", "address_country", "address_state", "address_zip", "billing_email", "credit_balance", "currency", "free_balance", "hubspot_id", "is_active", "is_personal", "loki_endpoint", "loki_id", "loki_token", "modified_on", "org_display_name", "org_logo", "pending_expense", "period_end", "period_start", "prom_endpoint", "prom_id", "prom_token", "rate_limit", "spending_limit_hard", "spending_limit_soft", "subscription_cycle", "subscription_pause_reason", "subscription_price_id", "subscription_tier", "trial_end", "usage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        org_stripe_id: typing.Union[MetaOapg.properties.org_stripe_id, str, ],
        last_invoice_date: typing.Union[MetaOapg.properties.last_invoice_date, str, datetime, ],
        org_creator: typing.Union[MetaOapg.properties.org_creator, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        org_name: typing.Union[MetaOapg.properties.org_name, str, ],
        added_on: typing.Union[MetaOapg.properties.added_on, str, datetime, schemas.Unset] = schemas.unset,
        address_1: typing.Union[MetaOapg.properties.address_1, str, schemas.Unset] = schemas.unset,
        address_2: typing.Union[MetaOapg.properties.address_2, str, schemas.Unset] = schemas.unset,
        address_city: typing.Union[MetaOapg.properties.address_city, str, schemas.Unset] = schemas.unset,
        address_country: typing.Union[MetaOapg.properties.address_country, str, schemas.Unset] = schemas.unset,
        address_state: typing.Union[MetaOapg.properties.address_state, str, schemas.Unset] = schemas.unset,
        address_zip: typing.Union[MetaOapg.properties.address_zip, str, schemas.Unset] = schemas.unset,
        billing_email: typing.Union[MetaOapg.properties.billing_email, str, schemas.Unset] = schemas.unset,
        credit_balance: typing.Union[MetaOapg.properties.credit_balance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        free_balance: typing.Union[MetaOapg.properties.free_balance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hubspot_id: typing.Union[MetaOapg.properties.hubspot_id, str, schemas.Unset] = schemas.unset,
        is_active: typing.Union[MetaOapg.properties.is_active, bool, schemas.Unset] = schemas.unset,
        is_personal: typing.Union[MetaOapg.properties.is_personal, bool, schemas.Unset] = schemas.unset,
        loki_endpoint: typing.Union[MetaOapg.properties.loki_endpoint, str, schemas.Unset] = schemas.unset,
        loki_id: typing.Union[MetaOapg.properties.loki_id, str, schemas.Unset] = schemas.unset,
        loki_token: typing.Union[MetaOapg.properties.loki_token, str, schemas.Unset] = schemas.unset,
        modified_on: typing.Union[MetaOapg.properties.modified_on, str, datetime, schemas.Unset] = schemas.unset,
        org_display_name: typing.Union[MetaOapg.properties.org_display_name, str, schemas.Unset] = schemas.unset,
        org_logo: typing.Union[MetaOapg.properties.org_logo, str, schemas.Unset] = schemas.unset,
        pending_expense: typing.Union[MetaOapg.properties.pending_expense, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        period_end: typing.Union[MetaOapg.properties.period_end, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        period_start: typing.Union[MetaOapg.properties.period_start, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        prom_endpoint: typing.Union[MetaOapg.properties.prom_endpoint, str, schemas.Unset] = schemas.unset,
        prom_id: typing.Union[MetaOapg.properties.prom_id, str, schemas.Unset] = schemas.unset,
        prom_token: typing.Union[MetaOapg.properties.prom_token, str, schemas.Unset] = schemas.unset,
        rate_limit: typing.Union[MetaOapg.properties.rate_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        spending_limit_hard: typing.Union[MetaOapg.properties.spending_limit_hard, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        spending_limit_soft: typing.Union[MetaOapg.properties.spending_limit_soft, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        subscription_cycle: typing.Union[MetaOapg.properties.subscription_cycle, str, schemas.Unset] = schemas.unset,
        subscription_pause_reason: typing.Union['SubscriptionPaused', schemas.Unset] = schemas.unset,
        subscription_price_id: typing.Union[MetaOapg.properties.subscription_price_id, str, schemas.Unset] = schemas.unset,
        subscription_tier: typing.Union[MetaOapg.properties.subscription_tier, str, schemas.Unset] = schemas.unset,
        trial_end: typing.Union[MetaOapg.properties.trial_end, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        usage: typing.Union['OrgUsage', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Org':
        return super().__new__(
            cls,
            *args,
            org_stripe_id=org_stripe_id,
            last_invoice_date=last_invoice_date,
            org_creator=org_creator,
            id=id,
            org_name=org_name,
            added_on=added_on,
            address_1=address_1,
            address_2=address_2,
            address_city=address_city,
            address_country=address_country,
            address_state=address_state,
            address_zip=address_zip,
            billing_email=billing_email,
            credit_balance=credit_balance,
            currency=currency,
            free_balance=free_balance,
            hubspot_id=hubspot_id,
            is_active=is_active,
            is_personal=is_personal,
            loki_endpoint=loki_endpoint,
            loki_id=loki_id,
            loki_token=loki_token,
            modified_on=modified_on,
            org_display_name=org_display_name,
            org_logo=org_logo,
            pending_expense=pending_expense,
            period_end=period_end,
            period_start=period_start,
            prom_endpoint=prom_endpoint,
            prom_id=prom_id,
            prom_token=prom_token,
            rate_limit=rate_limit,
            spending_limit_hard=spending_limit_hard,
            spending_limit_soft=spending_limit_soft,
            subscription_cycle=subscription_cycle,
            subscription_pause_reason=subscription_pause_reason,
            subscription_price_id=subscription_price_id,
            subscription_tier=subscription_tier,
            trial_end=trial_end,
            usage=usage,
            _configuration=_configuration,
            **kwargs,
        )

from pulze_ai_python_sdk.model.org_usage import OrgUsage
from pulze_ai_python_sdk.model.subscription_paused import SubscriptionPaused
